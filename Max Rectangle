class Solution{
  public:
  
  int maxHist(int rows[],int n)
  {
     
      int right[n];
      int left[n];
      stack<int>st;
      for(int i=0;i<n;i++)
      {
          while(!st.empty()&&rows[st.top()]>=rows[i])
          {
            st.pop();  
          }
          if(st.empty())
          left[i]=-1;
          else
          left[i]=st.top();
          st.push(i);
      }
      while(!st.empty())
      st.pop();
          for(int i=n-1;i>=0;i--)
      {
          while(!st.empty()&&rows[st.top()]>=rows[i])
          {
            st.pop();  
          }
          if(st.empty())
          right[i]=n;
          else
          right[i]=st.top();
          st.push(i);
      }
      
      int m=INT_MIN;
    
      for(int i=0;i<n;i++)
      {
     
      m=max(m,(right[i]-left[i]-1)*rows[i]);
      }
      
      return m;
  }
    int maxArea(int M[MAX][MAX], int n, int m) {
        int ans=0;
        int rows[m]={0};
        for(int i=0;i<n;i++)
        { 
            for(int j=0;j<m;j++)
            {
                if(M[i][j]==0)
                rows[j]=0;
                else
                rows[j]++;
            }
            ans=max(maxHist(rows,m),ans);
        }
        return ans;
    }
};
